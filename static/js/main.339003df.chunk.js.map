{"version":3,"sources":["constants.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","GIF_API","giphyCard","props","content","emptyData","url","Container","Row","className","dataLength","length","next","fetchAPI","hasMore","loader","style","display","map","ele","i","Col","xs","md","key","Card","width","height","Img","variant","src","images","downsized","Body","Title","title","Spinner","animation","App","offsetUrl","state","page","contentArray","fetch","then","response","json","pagination","count","setState","push","data","catch","err","console","error","handleSubmit","e","preventDefault","FormData","target","get","stateURL","this","onSubmit","InputGroup","FormControl","placeholder","aria-label","name","aria-describedby","Append","Button","type","background","color","fontSize","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.339003df.chunk.js","sourcesContent":["export const API_KEY = 'zgnCTfJOIjRGKsIw0SKKSqmsNxz0TSID';\nexport const GIF_API = 'http://api.giphy.com/v1/gifs';","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { Empty } from 'antd';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nexport default function giphyCard(props) {\n    const { content, emptyData, url } = props;\n    \n    return (\n        <Container>\n            <Row>\n                <InfiniteScroll className='row' dataLength={content.length/9} next={() => props.fetchAPI(url)} hasMore={true}\n                    loader={\n                        <div className={\"col-lg-12 text-center\"} style={{display: (emptyData === false ? 'block': 'none')}}>\n                            Loading....\n                        </div>}\n                         >\n                    {\n                        content.length > 0 ? (\n                            content.map((ele, i) => {\n                                return (\n                                    <Col xs={6} md={4} key={i}>\n                                        <Card style={{ width: '17rem', height: '17rem' }}>\n                                            <Card.Img variant=\"top\" src={ele.images.downsized.url} style={{ width: `268px`, height: `200px` }} />\n                                            <Card.Body>\n                                                <Card.Title>{ele.title}</Card.Title>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                )\n                            })) : <div className='emptyLoad'>\n                                {emptyData === false ? <Spinner animation=\"border\" /> : <Empty />}\n                            </div>\n                    }\n                </InfiniteScroll>\n\n\n            </Row>\n        </Container>\n\n    )\n}\n","import React from 'react';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport FormControl from 'react-bootstrap/FormControl';\nimport './App.css';\nimport { API_KEY, GIF_API } from './constants';\nimport Card from './components/Card';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: [],\n      count:0,\n      emptyData:false,\n      page : 0,\n      stateURL:``\n    }\n  }\n\n  fetchAPI = (url) => {\n    var offsetUrl   = url+ '&offset=' +this.state.page;\n    var contentArray = this.state.content;\n    fetch(offsetUrl)\n      .then(response => response.json())\n      .then(content => {\n        if(content.pagination.count === 0){\n          this.setState({ emptyData: true });\n        }\n        contentArray.push(...content.data)\n        this.setState({ content: contentArray });\n        this.setState({page: this.state.page + 1});\n        \n      })\n      .catch(err => {\n        console.error(err);\n      })\n    \n  }\n  componentDidMount() {\n    let url = `${GIF_API}/trending?api_key=${API_KEY}&limit=9&rating=g`\n    this.setState({stateURL:url});\n    this.fetchAPI(url);\n  }\n \n  handleSubmit = (e) => {\n    e.preventDefault();\n    \n    const data = new FormData(e.target);\n    if(data.get('searchInput') !== ''){\n      this.setState({count: this.state.count+1});\n    }\n    let url = `${GIF_API}/search?q=${data.get('searchInput')}&api_key=${API_KEY}&limit=9&rating=g`;\n    this.setState({stateURL:url});\n    this.setState({page:0, content:[]}, () => {\n      this.fetchAPI(url);\n    })\n    \n  }\n  render() {\n    const {count, content, emptyData, stateURL} = this.state;\n    return (\n      <div className=\"App\">\n        <h3> GIPHY APPLICATION </h3>\n        <form onSubmit={this.handleSubmit}>\n          <InputGroup className=\"mb-3\">\n            <FormControl placeholder=\"search gif\" aria-label=\"search gif\" name='searchInput' aria-describedby=\"basic-addon2\" />\n            <InputGroup.Append>\n              <Button variant=\"outline-secondary\" type='submit' style={{background:'black', color:'white'}}><i className='fa fa-search'></i></Button>\n              <span style={{fontSize:'22px'}}>&nbsp; Total Searches : ({count})</span>\n            </InputGroup.Append>\n          </InputGroup>\n        </form>\n        <Card content={content} emptyData={emptyData} fetchAPI={this.fetchAPI} url={stateURL}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}